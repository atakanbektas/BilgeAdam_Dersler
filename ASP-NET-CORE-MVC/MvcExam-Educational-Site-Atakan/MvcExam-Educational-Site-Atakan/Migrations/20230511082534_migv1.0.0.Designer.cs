// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcExam_Educational_Site_Atakan.Models;

#nullable disable

namespace MvcExam_Educational_Site_Atakan.Migrations
{
    [DbContext(typeof(EgitimDbContext))]
    [Migration("20230511082534_migv1.0.0")]
    partial class migv100
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.CoursesCertificate", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime");

                    b.HasKey("CourseId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("CoursesCertificates");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExamName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.StudentsCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfJoining")
                        .HasColumnType("date");

                    b.Property<string>("EducationInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WorkingInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Course", b =>
                {
                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Courses_Categories");

                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Courses_Teachers");

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.CoursesCertificate", b =>
                {
                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Certificate", "Certificate")
                        .WithMany("CoursesCertificates")
                        .HasForeignKey("CertificateId")
                        .IsRequired()
                        .HasConstraintName("FK_CoursesCertificates_Certificates");

                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Course", "Course")
                        .WithMany("CoursesCertificates")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CoursesCertificates_Courses");

                    b.Navigation("Certificate");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Exam", b =>
                {
                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Exams_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.StudentsCourse", b =>
                {
                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Course", "Course")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentsCourses_Courses");

                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Student", "Student")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentsCourses_Students");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Video", b =>
                {
                    b.HasOne("MvcExam_Educational_Site_Atakan.Models.Course", "Course")
                        .WithMany("Videos")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Videos_Courses");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Certificate", b =>
                {
                    b.Navigation("CoursesCertificates");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Course", b =>
                {
                    b.Navigation("CoursesCertificates");

                    b.Navigation("Exams");

                    b.Navigation("StudentsCourses");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Student", b =>
                {
                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("MvcExam_Educational_Site_Atakan.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
